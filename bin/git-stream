#!/usr/bin/env bash

WORKING_DIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")

usage() {
    version
    echo "Usage: git stream <subcommand>"
    echo
    echo "Available subcommands are:"
    echo
    echo "init      Initialize your repo for use with Git Stream"
    echo "feature   Work with Features"
    echo "hotfix    Work with Hotfixes"
    echo "release   Work with Releases"
    echo "help      Show this help"
    echo "version   Show the Version and exit"
}

version() {
    echo "Git Stream 0.1.0"
    echo
}

git_current_branch () {
  local _saved_ifs _branch
  _saved_ifs=${IFS}
  IFS=:
  _branch=`git branch 2> /dev/null`
  if [ $? -eq 0 ]; then
    echo -n "$1`echo ${_branch} | grep '^*' | sed -e 's/\*\ //'`$2"
  fi
  IFS=${_saved_ifs}
}

git_rev_exists() {
    if git rev-parse $1 >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

git_working_dir_clean() {
    if [ -z "$(git status --porcelain 2>&1)" ]; then
      return 0
    else
      return 1
    fi
}

git_list_branches() {
    git for-each-ref --format='%(refname:short)' refs/heads/
}

do_git() {
    git "$@" >/dev/null 2>&1
    return $?
}

gitstream_is_initialized() {
    if git config --get gitstream.branch.working >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

gitstream_environment() {
    if ! gitstream_is_initialized; then
        print_error "Git Stream is not initialized. Please run 'git stream init' first"
        exit 1
    fi

    VERSION_PREFIX=$(git config gitstream.prefix.version)
    FEATURE_PREFIX=$(git config gitstream.prefix.feature)
    HOTFIX_PREFIX=$(git config gitstream.prefix.hotfix)
    RELEASE_PREFIX=$(git config gitstream.prefix.release)
    WORKING_BRANCH=$(git config gitstream.branch.working)
}

gitstream_source() {
    local command commandType file func

    command="$1"
    file="${WORKING_DIR}/git-stream-${command}"
    func="gitstream_$(echo ${command} | sed s/\-/\_/g)"

    if ! [ -e ${file} ]; then
        usage; exit 1
    fi

    source ${file}

    commandType=$(type ${func} | head -n 1)

    if [ "${commandType}" != "${func} is a function" ]; then
        usage; exit 1
    fi
}

print_error() {
    echo $1 >&2
}

bug_error_message() {
    print_error ""
    print_error "This should not have happened"
    print_error "Please report this bug at https://github.com/mrkmg/git-stream/issues/new"
}

main() {
    if [ "$#" -eq 0 ]; then
        usage; exit 1
    fi

    local subCommand="$1"; shift

    case ${subCommand} in
        "-h"|"--help")
            usage; exit 0
            ;;
        "-v"|"--version")
            version; exit 0
            ;;
    esac

    gitstream_source "${subCommand}"

    gitstream_${subCommand} "$@"
}

main "$@"