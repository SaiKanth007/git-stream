#!/usr/bin/env bash

gitstream_hotfix_finish() {
    local hotfix new_version prefixed_version new_prefixed_version branch merge_args

    merge=1

    if [ $# -lt 2 ]; then
        usage; exit 1;
    fi

    hotfix="$1"
    new_version="$2"

    if [ ${new_version:0:${#VERSION_PREFIX}} = ${VERSION_PREFIX} ]; then
        new_prefixed_version="${new_version}"
    else
        new_prefixed_version="${VERSION_PREFIX}${new_version}"
    fi

    branch="${HOTFIX_PREFIX}${hotfix}"

    if git_rev_exists ${new_prefixed_version}; then
        print_error "The tag ${new_prefixed_version} already exists."
        exit 1
    fi

    gitstream_checkout_branch ${branch}

    if ! do_git tag ${new_prefixed_version}; then
        print_error "Failed to make new tag ${new_prefixed_version}."
        bug_error_message
        exit 1
    fi

    echo "The new release ${new_prefixed_version} has been created."

    gitstream_checkout_branch ${WORKING_BRANCH}

    if [ ${GITSTREAM_HOTFIX_MERGE} -eq 1 ]; then

        if [ ${GITSTREAM_HOTFIX_NOFF} -eq 1 ] || [ ${#GITSTREAM_HOTFIX_MESSAGE} -gt 0 ]; then
            merge_args="${merge_args} --no-ff"
        fi

        if [ ${#GITSTREAM_HOTFIX_MESSAGE} -gt 0 ]; then
            merge_args="${merge_args} -m ${GITSTREAM_HOTFIX_MESSAGE}"
        fi

        gitstream_merge "${branch}" "${WORKING_BRANCH}" ${merge_args}

        echo "${hotfix} has been applied to master."
    fi

    if ! do_git branch -D ${branch}; then
        print_error "Failed to remove ${branch}"
        bug_error_message
        exit 1
    fi

}