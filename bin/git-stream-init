#!/usr/bin/env bash
USE_DEFAULTS=0
FORCE=0
VERSION_PREFIX=""
FEATURE_PREFIX=""
HOTFIX_PREFIX=""
RELEASE_PREFIX=""
WORKING_PREFIX=""
DEFAULT_PUSH_REMOTE=""

usage() {
    echo "Usage: git stream init <options>"
    echo
    echo "Available options are:"
    echo
    echo "-d, --defaults                  Initialize with all default options"
    echo "-f, --force                     Force Initialization"
    echo "--version-prefix {prefix}       Version Prefix []"
    echo "--feature-prefix {prefix}       Feature Branch Prefix [feature/]"
    echo "--hotfix-prefix {prefix}        Hotfix Branch Prefix [hotfix/]"
    echo "--release-prefix {prefix}       Release Branch Prefix [release/]"
    echo "--working-branch {branch}       Working Branch [master]"
    echo "--default-push-remote {remote}  Remote branch to push to. If empty, no automated pushes will occur [origin]"
}

unknownOptionMessage() {
    echo "Unknown Option: $1"
}

alreadyInitializedMessage() {
    echo "Already Initialized, use -f to force reinitialization"
}

finishedMessage() {
    echo "Git Stream is initialized!"
}

setDefaults() {
    if [[ -z ${VERSION_PREFIX} ]]; then
        VERSION_PREFIX=""
    fi

    if [[ -z ${FEATURE_PREFIX} ]]; then
        FEATURE_PREFIX="feature/"
    fi

    if [[ -z ${HOTFIX_PREFIX} ]]; then
        HOTFIX_PREFIX="hotfix/"
    fi

    if [[ -z ${RELEASE_PREFIX} ]]; then
        RELEASE_PREFIX="release/"
    fi

    if [[ -z ${WORKING_BRANCH} ]]; then
        WORKING_BRANCH="master"
    fi

    if [[ -z ${DEFAULT_PUSH_REMOTE} ]]; then
        DEFAULT_PUSH_REMOTE="origin"
    fi

}

promptForNeededConfiguration() {
    if [[ -z ${VERSION_PREFIX} ]]; then
        read -p "Version Prefix []: " VERSION_PREFIX
    fi

    if [[ -z ${FEATURE_PREFIX} ]]; then
        read -p "Feature Branch Prefix [feature/]: " FEATURE_PREFIX
    fi

    if [[ -z ${HOTFIX_PREFIX} ]]; then
        read -p "Hotfix Branch Prefix [hotfix/]: " HOTFIX_PREFIX
    fi

    if [[ -z ${RELEASE_PREFIX} ]]; then
        read -p "Release Branch Prefix [release/]: " RELEASE_PREFIX
    fi

    if [[ -z ${WORKING_BRANCH} ]]; then
        read -p "Working Branch [master]: " WORKING_BRANCH
    fi

    if [[ -z ${DEFAULT_PUSH_REMOTE} ]]; then
        read -p "Default Push Remote [origin]: " DEFAULT_PUSH_REMOTE
    fi
}

removeOldInitialization() {
    return 0
}

writeConfig() {
    git config gitstream.branch.working ${WORKING_BRANCH}
    git config gitstream.prefix.version ${VERSION_PREFIX}
    git config gitstream.prefix.feature ${FEATURE_PREFIX}
    git config gitstream.prefix.hotfix ${HOTFIX_PREFIX}
    git config gitstream.prefix.release ${RELEASE_PREFIX}
    git config gitstream.defaultpushremote ${DEFAULT_PUSH_REMOTE}
}

moveToWorkingBranch() {
    local currentBranch=$(git_current_branch)

    if [[ ${currentBranch} != ${WORKING_BRANCH} ]]; then
        git checkout -B ${WORKING_BRANCH}
    fi
}

gitstream_init() {
    local option=""
    while [ $# -gt 0 ]; do
        option="$1"; shift

        case ${option} in
            -h|--help|help)
                usage; exit 0
                ;;
            -d|--defaults)
                USE_DEFAULTS=1
                ;;
            -f|--force)
                FORCE=1
                ;;
            --version-prefix)
                VERSION_PREFIX=$1; shift
                ;;
            --feature-prefix)
                FEATURE_PREFIX=$1; shift
                ;;
            --hotfix-prefix)
                HOTFIX_PREFIX=$1; shift
                ;;
            --release-prefix)
                RELEASE_PREFIX=$1; shift
                ;;
            --working-branch)
                WORKING_BRANCH=$1; shift
                ;;
            --default-push-remote)
                DEFAULT_PUSH_REMOTE=$1; shift
                ;;
            *)
                unknownOptionMessage ${option}; usage; exit 1
                ;;
        esac
    done

    if gitstream_is_initialized && [ ${FORCE} -eq 0 ]; then
        alreadyInitializedMessage; exit 1;
    fi

    if [ ${USE_DEFAULTS} -eq 0 ]; then
        promptForNeededConfiguration
    fi

    setDefaults

    if gitstream_is_initialized; then
        git config --remove-section gitstream
    fi

    writeConfig
    moveToWorkingBranch
    finishedMessage

    exit 0
}
